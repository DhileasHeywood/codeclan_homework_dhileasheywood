library(tidyverse)
library(fable)
library(tsibbledata)
library(tsibble)
knitr::opts_chunk$set(echo = TRUE, fig.align = "center")
knitr::include_graphics("images/spatial_example.png")
knitr::include_graphics("images/spatial_example2.png")
knitr::include_graphics("images/spatial_data_text.jpg")
library(tidyverse)
library(nycflights13)
airports %>%
dplyr::select(name,lat,lon)
knitr::include_graphics("images/spatial_data_types.png")
knitr::include_graphics("images/vector_types.png")
knitr::include_graphics("images/features.png")
library(sf)
# read in data about north_carolina using the st_read function
north_carolina <- st_read(system.file("shape/nc.shp", package = "sf"))
# check class and look at the data
class(north_carolina)
view(north_carolina)
# print out the north_carolina data
head(north_carolina,3)
# let's look at the attributes in the sf_column
attr(north_carolina, "sf_column")
(north_carolina_geometry <- st_geometry(north_carolina))
north_carolina_geometry[[1]]
plot(north_carolina)
# plot the first column
plot(north_carolina[1])
# subset the county
plot(north_carolina[1,1])
# plot the data using ggplot
ggplot(data = north_carolina, aes(fill = SID74)) +
geom_sf() +
theme_bw()
ggplot(data = north_carolina, aes(fill = BIR74)) +
geom_sf() +
theme_bw()
library(rnaturalearth)
library(rnaturalearthdata)
library(rgeos)
world <- ne_countries(scale = "medium", returnclass = "sf")
class(world)
view(world)
head(world, 1)
ggplot(data = world) +
geom_sf() +
xlab("Longitude") + ylab("Latitude") +
ggtitle("World map")
ggplot(data = world) +
geom_sf(color = "black", fill = "lightgreen") +
xlab("Longitude") + ylab("Latitude") +
ggtitle("World map")
ggplot(data = world) +
geom_sf(aes(fill = pop_est)) +
scale_fill_viridis_c(option = "plasma", trans = "sqrt")
head(world)
ggplot(data = world) +
geom_sf(aes(fill = gdp_md_est)) +
xlab("Longitude") + ylab("Latitude") +
ggtitle("World map") +
scale_fill_viridis_c(option = "plasma", trans = "sqrt")
# filter the data based on country
country_tidy <- world %>%
filter(name == "Italy")
# check the dimensions to make sure we only have one
dim(country_tidy)
# make a plot
ggplot(country_tidy) +
geom_sf() +
ggtitle(country_tidy$name) +
xlab("Longitude") + ylab("Latitude")
#transform to UTM
country_transformed <- st_transform(country_tidy,3003)
#create the fishnet
grid <- st_make_grid(country_transformed, cellsize = 50000, what = "centers")
plot(grid)
#only extract the points in the limits of our country of choice
grid <- st_intersection(grid,country_transformed)
#our fishnet now
plot(grid)
#transform from polygon shape to line
country_line <- st_cast(country_transformed,"MULTILINESTRING")
#calculation of the distance between the coast and our points
dist <- st_distance(country_line,grid)
#distance with unit in meters
head(dist)
#create a data.frame with the distance and the coordinates of the points
distance_plot <- data.frame(dist=as.vector(dist)/1000,
st_coordinates(grid))
head(distance_plot,5)
country_tidy <- world %>%
filter(name == "United Kingdom")
country_transformed <- st_transform(country_tidy, 27700)
plot(grid)
country_tidy <- world %>%
filter(name == "United Kingdom")
country_transformed <- st_transform(country_tidy, 27700)
grid <- st_make_grid(country_transformed, cellsize = 50000, what = "centers")
plot(grid)
ggplot(world) +
geom_sf()
ggplot(world) +
geom_sf() +
coord_sf(xlim = c(-102.15, -74.12), ylim = c(7.65, 33.97), expand = FALSE)
ggplot(world) +
geom_sf(aes(fill = pop_est)) +
coord_sf(xlim = c(-102.15, -74.12), ylim = c(7.65, 33.97), expand = FALSE)
?coord_sf
ggplot(world) +
geom_sf(aes(fill = pop_est)) +
coord_sf(xlim = c(43.001217, 50.702710), ylim = c(5.439356, 16.285), expand = FALSE)
world_points <- cbind(world, world_coordinates)
world_centres <- st_centroid(world$geometry)
world_coordinates <- st_coordinates(world_centres)
world_points <- cbind(world, world_coordinates)
View(world_points)
ggplot(world) +
geom_sf(fill = "grey") +
geom_text(data = world_points, aes(X, Y, label = name), fontface = "bold", check_overlap = TRUE) +
coord_sf(xlim = c(-102.15, -74.12), ylim = c(7.65, 33.97), expand = FALSE)
library(leaflet)
install.packages("leaflet")
library(leaflet)
leaflet() %>%
addTiles() %>%
addMarkers(lng = 174.768, lat = -36.852, popup = "Birth of R")
library(RCurl)
library(RCurl)
install.packages("RCurl")
library(RCurl)
library(jsonlite)
colarado_data_url <- paste0("https://data.colorado.gov/resource/j5pc-4t32.json?","&county=BOULDER")
waterdata <- getURL(URLencode(colorado_data_url)
colarado_data_url <- paste0("https://data.colorado.gov/resource/j5pc-4t32.json?","&county=BOULDER")
waterdata <- getURL(URLencode(colorado_data_url))
colarado_data_url <- paste0("https://data.colorado.gov/resource/j5pc-4t32.json?","&county=BOULDER")
waterdata <- getURL(URLencode(colorado_data_url))
colorado_data_url <- paste0("https://data.colorado.gov/resource/j5pc-4t32.json?","&county=BOULDER")
waterdata <- getURL(URLencode(colorado_data_url))
colorado_data_url <- paste0("https://data.colorado.gov/resource/j5pc-4t32.json?","&county=BOULDER")
waterdata <- getURL(URLencode(colorado_data_url))
library(RCurl)
library(jsonlite)
colorado_data_url <- paste0("https://data.colorado.gov/resource/j5pc-4t32.json?","&county=BOULDER")
waterdata <- getURL(URLencode(colorado_data_url))
colorado_data_url <- paste0("https://data.colorado.gov/resource/j5pc-4t32.json?","&county=BOULDER")
water_data <- getURL(URLencode(colorado_data_url))
install.packages("httr")
library(curl)
con <- curl(colarado_data_url)
test2 <- readLines(con)
water_data_df2 <- fromJSON(test2) %>% jsonlite::flatten(recursive = TRUE)
library(curl)
con <- curl(colarado_data_url)
test2 <- readLines(con)
water_data_df2 <- fromJSON(test2) %>% jsonlite::flatten(recursive = TRUE)
water_data_df2
library(curl)
con <- curl(colarado_data_url)
water_json <- readLines(con)
water_data_df <- fromJSON(water_json) %>% jsonlite::flatten(recursive = TRUE)
water_data_df
water_data_df2 <- water_data_df %>%
mutate_at(vars(amount, location.latitude, location.longitude), as.numeric) %>%
filter(!is.na(location.latitude))
water_data_df2
leaflet(water_data_df2) %>%
addTiles() %>%
addCircleMarkers(lng = ~location.longitude, lat = ~location.latitude)
leaflet(water_data_df2) %>%
addTiles() %>%
addCircleMarkers(lng = ~location.longitude, lat = ~location.latitude, radius = ~amount)
leaflet(water_data_df2) %>%
addTiles() %>%
addCircleMarkers(lng = ~location.longitude, lat = ~location.latitude, radius = ~amount, weight = 1)
leaflet(water_data_df2) %>%
addTiles() %>%
addCircleMarkers(lng = ~location.longitude, lat = ~location.latitude, radius = ~amount/1000, weight = 1)
leaflet(water_data_df2) %>%
addTiles() %>%
addCircleMarkers(lng = ~location.longitude, lat = ~location.latitude, radius = ~amount/750, weight = 1)
leaflet(water_data_df2) %>%
addTiles() %>%
addCircleMarkers(lng = ~location.longitude, lat = ~location.latitude, radius = ~amount/100, weight = 1)
leaflet(water_data_df2) %>%
addTiles() %>%
addMarkers(lng = ~location.longitude, lat = ~location.latitude)
leaflet(water_data_df2) %>%
addTiles() %>%
addMarkers(lng = ~location.longitude, lat = ~location.latitude, clusterOptions = markerClusterOptions())
library(fable)
library(tidyverse)
library(lubridate)
library(tsibble)
library(tsibbledata)
library(fable)
